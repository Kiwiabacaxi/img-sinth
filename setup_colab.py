"""
Setup autom√°tico para Google Colab
Configura ambiente completo para gera√ß√£o de imagens sint√©ticas de pastagens brasileiras
"""

import os
import sys
import subprocess
import torch
from pathlib import Path

def check_gpu():
    """Verifica disponibilidade e tipo de GPU"""
    if torch.cuda.is_available():
        gpu_name = torch.cuda.get_device_name(0)
        gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1e9
        print(f"‚úÖ GPU dispon√≠vel: {gpu_name}")
        print(f"‚úÖ Mem√≥ria GPU: {gpu_memory:.1f} GB")
        return True
    else:
        print("‚ùå GPU n√£o dispon√≠vel - verificar runtime do Colab")
        return False

def install_dependencies():
    """Instala depend√™ncias com otimiza√ß√µes para Colab"""
    print("üîß Instalando depend√™ncias...")
    
    # Instalar requirements
    subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], 
                   check=True, capture_output=True)
    
    # Otimiza√ß√µes espec√≠ficas do Colab
    try:
        # Instalar xformers com vers√£o espec√≠fica para Colab
        subprocess.run([sys.executable, "-m", "pip", "install", 
                       "xformers==0.0.22.post7", "--index-url", 
                       "https://download.pytorch.org/whl/cu118"], 
                       check=True, capture_output=True)
        print("‚úÖ xformers instalado com sucesso")
    except:
        print("‚ö†Ô∏è  xformers n√£o instalado - performance pode ser reduzida")

def setup_directories():
    """Cria e verifica estrutura de diret√≥rios"""
    print("üìÅ Configurando diret√≥rios...")
    
    # Diret√≥rios essenciais para Colab
    colab_dirs = [
        '/content/model_cache',
        '/content/generated_cache', 
        '/content/outputs',
        '/content/datasets',
        '/content/temp'
    ]
    
    for dir_path in colab_dirs:
        os.makedirs(dir_path, exist_ok=True)
    
    print("‚úÖ Diret√≥rios configurados")

def download_models():
    """Pre-download de modelos essenciais para cache"""
    print("üì• Fazendo download de modelos base...")
    
    from diffusers import StableDiffusionPipeline, ControlNetModel
    from transformers import CLIPTextModel
    
    try:
        # Cache do modelo principal
        model_id = "stabilityai/stable-diffusion-xl-base-1.0"
        pipe = StableDiffusionPipeline.from_pretrained(
            model_id,
            cache_dir="/content/model_cache",
            torch_dtype=torch.float16
        )
        print("‚úÖ Stable Diffusion XL baixado")
        
        # Cache ControlNet models  
        controlnet = ControlNetModel.from_pretrained(
            "lllyasviel/sd-controlnet-canny",
            cache_dir="/content/model_cache",
            torch_dtype=torch.float16
        )
        print("‚úÖ ControlNet Canny baixado")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro no download de modelos: {e}")

def setup_environment():
    """Configura vari√°veis de ambiente otimizadas"""
    print("‚öôÔ∏è  Configurando ambiente...")
    
    # Otimiza√ß√µes de mem√≥ria
    os.environ['PYTORCH_CUDA_ALLOC_CONF'] = 'max_split_size_mb:512'
    os.environ['CUDA_VISIBLE_DEVICES'] = '0'
    
    # Cache directories
    os.environ['HF_HOME'] = '/content/model_cache'
    os.environ['TRANSFORMERS_CACHE'] = '/content/model_cache'
    os.environ['DIFFUSERS_CACHE'] = '/content/model_cache'
    
    print("‚úÖ Ambiente configurado")

def verify_installation():
    """Verifica se instala√ß√£o est√° correta"""
    print("üß™ Verificando instala√ß√£o...")
    
    try:
        import diffusers
        import transformers
        import ultralytics
        import controlnet_aux
        print("‚úÖ Importa√ß√µes principais OK")
        
        # Teste r√°pido de GPU
        if torch.cuda.is_available():
            test_tensor = torch.randn(100, 100).cuda()
            print("‚úÖ Teste de GPU OK")
            
        return True
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal de setup"""
    print("üå± Configurando Sistema de Gera√ß√£o de Pastagens Brasileiras")
    print("=" * 60)
    
    # Verifica√ß√µes
    if not check_gpu():
        print("‚ö†Ô∏è  Continuando sem GPU (apenas CPU)")
    
    # Setup
    try:
        install_dependencies()
        setup_directories() 
        setup_environment()
        
        # Download de modelos (opcional - pode ser demorado)
        download_choice = input("Fazer download de modelos agora? (s/N): ")
        if download_choice.lower() in ['s', 'sim', 'y', 'yes']:
            download_models()
        
        # Verifica√ß√£o final
        if verify_installation():
            print("\n‚úÖ Setup completo! Sistema pronto para uso.")
            print("üìö Pr√≥ximo passo: executar notebook 00_Setup_Environment.ipynb")
        else:
            print("\n‚ùå Setup incompleto - verificar erros acima")
            
    except Exception as e:
        print(f"\n‚ùå Erro durante setup: {e}")
        print("Tente executar novamente ou verificar depend√™ncias")

if __name__ == "__main__":
    main()